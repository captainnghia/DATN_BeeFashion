Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.Beefashion\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\"\r\n            android:label=\"@string/app_name\"\r\n            android:theme=\"@style/Theme.Beefashion\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 92dbacdc6821ff1c428a26b578598dc2b3023b3c)
+++ b/app/src/main/AndroidManifest.xml	(date 1740729568371)
@@ -4,6 +4,22 @@
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" android:maxSdkVersion="33" />
+
+    <uses-permission android:name="android.permission.USE_EXACT_ALARM" />
+    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
+    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
+    <uses-permission
+        android:name="android.permission.SCHEDULE_EXACT_ALARM"
+        tools:ignore="ProtectedPermissions" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <uses-permission android:name="android.permission.INTERNET" />
+
+
+
     <application
         android:allowBackup="true"
         android:dataExtractionRules="@xml/data_extraction_rules"
Index: app/src/main/java/fpl/md19/beefashion/screens/accounts/MyDetailsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fpl.md19.beefashion.screens.accounts\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\r\nimport androidx.compose.material.icons.filled.Notifications\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport fpl.md19.beefashion.R\r\nimport java.time.LocalDate\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun MyDetailsScreen(\r\n    navController : NavController,\r\n    onBackClick: () -> Unit,\r\n    onNotificationClick: () -> Unit,\r\n    onSubmit: () -> Unit\r\n) {\r\n    var fullName = remember { mutableStateOf(\"\") }\r\n    var email = remember { mutableStateOf(\"\") }\r\n    var dateOfBirth = remember { mutableStateOf(\"\") }\r\n    var gender = remember { mutableStateOf(\"\") }\r\n    var phoneNumber = remember { mutableStateOf(\"\") }\r\n\r\n    val isFormValid = fullName.value.isNotEmpty() && email.value.isNotEmpty() && dateOfBirth.value.isNotEmpty() && gender.value.isNotEmpty() && phoneNumber.value.isNotEmpty()\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(16.dp)\r\n            .background(Color.White)\r\n    ) {\r\n        // Top Bar\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Icon(\r\n                painter = painterResource(id = R.drawable.ic_arrow_back),\r\n                contentDescription = \"Back\",\r\n                modifier = Modifier\r\n                    .size(24.dp)\r\n                    .clickable { navController.popBackStack() }\r\n            )\r\n            Text(\r\n                text = \"Đơn hàng\",\r\n                fontSize = 24.sp,\r\n                fontWeight = FontWeight.Bold\r\n            )\r\n            Icon(\r\n                painter = painterResource(id = R.drawable.bell),\r\n                contentDescription = \"Notifications\",\r\n                modifier = Modifier.size(24.dp)\r\n            )\r\n        }\r\n        Spacer(modifier = Modifier.height(25.dp))\r\n\r\n        // Full Name\r\n        Text(\r\n            text = \"Họ tên\",\r\n            fontSize = 16.sp,\r\n            color = Color.Black,\r\n            modifier = Modifier.padding(bottom = 8.dp)\r\n        )\r\n        OutlinedTextField(\r\n            value = fullName.value,\r\n            onValueChange = { fullName.value = it },\r\n            placeholder = { Text(\"Nhập họ tên của bạn\") },\r\n            modifier = Modifier.fillMaxWidth(),\r\n            shape = RoundedCornerShape(12.dp),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                unfocusedBorderColor = Color.LightGray,\r\n                focusedBorderColor = Color.Black\r\n            )\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n\r\n        // Email Address\r\n        Text(\r\n            text = \"Email\",\r\n            fontSize = 16.sp,\r\n            color = Color.Black,\r\n            modifier = Modifier.padding(bottom = 8.dp)\r\n        )\r\n        OutlinedTextField(\r\n            value = email.value,\r\n            onValueChange = { email.value = it },\r\n            placeholder = { Text(\"Nhập email của bạn\") },\r\n            modifier = Modifier.fillMaxWidth(),\r\n            shape = RoundedCornerShape(12.dp),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                unfocusedBorderColor = Color.LightGray,\r\n                focusedBorderColor = Color.Black\r\n            ),\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email)\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n\r\n        // Date of Birth\r\n        Text(\r\n            text = \"Ngày sinh\",\r\n            fontSize = 16.sp,\r\n            color = Color.Black,\r\n            modifier = Modifier.padding(bottom = 8.dp)\r\n        )\r\n        OutlinedTextField(\r\n            value = dateOfBirth.value,\r\n            onValueChange = { dateOfBirth.value = it },\r\n            placeholder = { Text(\"Nhập ngày sinh của bạn\") },\r\n            modifier = Modifier.fillMaxWidth(),\r\n            shape = RoundedCornerShape(12.dp),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                unfocusedBorderColor = Color.LightGray,\r\n                focusedBorderColor = Color.Black\r\n            ),\r\n            trailingIcon = {\r\n                Icon(\r\n                    painter = painterResource(id = R.drawable.calendar),\r\n                    contentDescription = \"Select date\",\r\n                    modifier = Modifier.size(24.dp)\r\n                )\r\n            }\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n\r\n        // Gender\r\n        Text(\r\n            text = \"Giới tính\",\r\n            fontSize = 16.sp,\r\n            color = Color.Black,\r\n            modifier = Modifier.padding(bottom = 8.dp)\r\n        )\r\n        OutlinedTextField(\r\n            value = gender.value,\r\n            onValueChange = { gender.value = it },\r\n            placeholder = { Text(\"Nhập giới tính của bạn\") },\r\n            modifier = Modifier.fillMaxWidth(),\r\n            shape = RoundedCornerShape(12.dp),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                unfocusedBorderColor = Color.LightGray,\r\n                focusedBorderColor = Color.Black\r\n            )\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n\r\n        // Phone Number\r\n        Text(\r\n            text = \"Số điện thoại\",\r\n            fontSize = 16.sp,\r\n            color = Color.Black,\r\n            modifier = Modifier.padding(bottom = 8.dp)\r\n        )\r\n        OutlinedTextField(\r\n            value = phoneNumber.value,\r\n            onValueChange = { phoneNumber.value = it },\r\n            placeholder = { Text(\"Nhập SDT của bạn\") },\r\n            modifier = Modifier.fillMaxWidth(),\r\n            shape = RoundedCornerShape(12.dp),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                unfocusedBorderColor = Color.LightGray,\r\n                focusedBorderColor = Color.Black\r\n            ),\r\n            leadingIcon = {\r\n                Row(\r\n                    horizontalArrangement = Arrangement.spacedBy(4.dp),\r\n                    modifier = Modifier.padding(start = 16.dp)\r\n                ) {\r\n                    Image(\r\n                        painter = painterResource(id = R.drawable.vietnam),\r\n                        contentDescription = \"US flag\",\r\n                        modifier = Modifier.size(24.dp)\r\n                    )\r\n                }\r\n            },\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone)\r\n        )\r\n\r\n        Spacer(modifier = Modifier.weight(1f))\r\n\r\n        Button(\r\n            onClick = { },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(top = 24.dp)\r\n                .height(50.dp),\r\n            colors = ButtonDefaults.buttonColors(\r\n                containerColor = if (isFormValid) Color.Black else Color.LightGray\r\n            ),\r\n            shape = RoundedCornerShape(12.dp)\r\n        ) {\r\n            Text(\r\n                text = \"Lưu\",\r\n                color = Color.White,\r\n                fontSize = 16.sp\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showSystemUi = true, showBackground = true)\r\n@Composable\r\nfun MyDetailsScreenPreview() {\r\n    val navController = rememberNavController()\r\n    MyDetailsScreen(\r\n        navController,\r\n        onBackClick = { /* Do nothing or mock back click action */ },\r\n        onNotificationClick = { /* Do nothing or mock notification click action */ },\r\n        onSubmit = { /* Do nothing or mock submit action */ }\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/fpl/md19/beefashion/screens/accounts/MyDetailsScreen.kt b/app/src/main/java/fpl/md19/beefashion/screens/accounts/MyDetailsScreen.kt
--- a/app/src/main/java/fpl/md19/beefashion/screens/accounts/MyDetailsScreen.kt	(revision 92dbacdc6821ff1c428a26b578598dc2b3023b3c)
+++ b/app/src/main/java/fpl/md19/beefashion/screens/accounts/MyDetailsScreen.kt	(date 1740729999862)
@@ -1,215 +1,372 @@
 package fpl.md19.beefashion.screens.accounts
 
+import android.Manifest
+import android.content.ContentValues
+import android.content.Context
+import android.content.pm.PackageManager
+import android.net.Uri
+import android.os.Build
+import android.provider.MediaStore
+import android.provider.OpenableColumns
+import android.util.Log
+import android.widget.Toast
+import androidx.activity.compose.rememberLauncherForActivityResult
+import androidx.activity.result.ActivityResultLauncher
+import androidx.activity.result.contract.ActivityResultContracts
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.foundation.text.KeyboardOptions
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.ArrowBack
-import androidx.compose.material.icons.filled.KeyboardArrowDown
-import androidx.compose.material.icons.filled.Notifications
+import androidx.compose.foundation.verticalScroll
 import androidx.compose.material3.*
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.layout.ContentScale
+import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.input.KeyboardType
+import androidx.compose.ui.text.style.TextDecoration
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
+import androidx.core.content.ContextCompat
+import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavController
 import androidx.navigation.compose.rememberNavController
+import coil.compose.AsyncImage
+import fpl.md19.beefashion.GlobalVarible.UserSesion
 import fpl.md19.beefashion.R
-import java.time.LocalDate
+import fpl.md19.beefashion.requests.UpdateUserRequest
+import fpl.md19.beefashion.requests.createMultipartBody
+import fpl.md19.beefashion.viewModels.MyDetailViewModel
+import okhttp3.MediaType.Companion.toMediaTypeOrNull
+import okhttp3.MultipartBody
+import okhttp3.RequestBody
+import java.io.File
+import java.io.FileOutputStream
+import java.io.IOException
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun MyDetailsScreen(
-    navController : NavController,
+    navController: NavController,
     onBackClick: () -> Unit,
     onNotificationClick: () -> Unit,
-    onSubmit: () -> Unit
+    onSubmit: () -> Unit,
+    myDetailsViewModel: MyDetailViewModel = viewModel()
 ) {
-    var fullName = remember { mutableStateOf("") }
-    var email = remember { mutableStateOf("") }
-    var dateOfBirth = remember { mutableStateOf("") }
-    var gender = remember { mutableStateOf("") }
-    var phoneNumber = remember { mutableStateOf("") }
+    val user = UserSesion.currentUser
+    Log.d("user information: ", user.toString())
+
+    var fullName by remember { mutableStateOf(user?.fullName ?: "") }
+    var email by remember { mutableStateOf(user?.email ?: "") }
+    var dateOfBirth by remember { mutableStateOf(user?.dateOfBirth ?: "") }
+    var gender by remember { mutableStateOf(user?.gender ?: "") }
+    var phone by remember { mutableStateOf(user?.phone ?: "") }
 
-    val isFormValid = fullName.value.isNotEmpty() && email.value.isNotEmpty() && dateOfBirth.value.isNotEmpty() && gender.value.isNotEmpty() && phoneNumber.value.isNotEmpty()
+//    var avatarUri by remember {
+//        mutableStateOf<Uri?>(
+//            if (user?.profileImageUrl.isNullOrEmpty())
+//                null
+//            else
+//                Uri.parse(user?.profileImageUrl)
+//        )
+//    }
 
-    Column(
-        modifier = Modifier
-            .fillMaxSize()
-            .padding(16.dp)
-            .background(Color.White)
-    ) {
-        // Top Bar
-        Row(
-            modifier = Modifier.fillMaxWidth(),
-            horizontalArrangement = Arrangement.SpaceBetween,
-            verticalAlignment = Alignment.CenterVertically
-        ) {
-            Icon(
-                painter = painterResource(id = R.drawable.ic_arrow_back),
-                contentDescription = "Back",
-                modifier = Modifier
-                    .size(24.dp)
-                    .clickable { navController.popBackStack() }
-            )
-            Text(
-                text = "Đơn hàng",
-                fontSize = 24.sp,
-                fontWeight = FontWeight.Bold
-            )
-            Icon(
-                painter = painterResource(id = R.drawable.bell),
-                contentDescription = "Notifications",
-                modifier = Modifier.size(24.dp)
-            )
-        }
-        Spacer(modifier = Modifier.height(25.dp))
+    val context = LocalContext.current
+    val scrollState = rememberScrollState()
+
+//    // Sử dụng ActivityResultContracts.GetContent() để chọn ảnh
+//    val getImageLauncher: ActivityResultLauncher<String> =
+//        rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->
+//            avatarUri = uri // Cập nhật URI của ảnh đã chọn
+//        }
+//
+//    val permissionLauncher = rememberLauncherForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
+//        if (granted) {
+//            // Permission granted, proceed to pick an image
+//            getImageLauncher.launch("image/*")
+//        } else {
+//            Toast.makeText(context, "Quyền truy cập hình ảnh bị từ chối", Toast.LENGTH_SHORT).show()
+//        }
+//    }
+//
+//    val avatarModel = if (avatarUri == null) {
+//        R.drawable.ao_phong  // hoặc hình ảnh mặc định của bạn
+//    } else {
+//        avatarUri
+//    }
+
+    val isFormValid = fullName.isNotEmpty() && email.isNotEmpty() && dateOfBirth.isNotEmpty() && gender.isNotEmpty() && phone.isNotEmpty()
+
+    Box(
+        modifier = Modifier
+            .fillMaxSize()
+            .background(Color.White)
+            .padding(16.dp)
+    ) {
+        Column(
+            modifier = Modifier
+                .fillMaxSize()
+                .verticalScroll(scrollState)
+                .padding(bottom = 80.dp),
+            horizontalAlignment = Alignment.CenterHorizontally
+        ) {
+            // Top Bar
+            Row(
+                modifier = Modifier.fillMaxWidth(),
+                horizontalArrangement = Arrangement.SpaceBetween,
+                verticalAlignment = Alignment.CenterVertically
+            ) {
+                Icon(
+                    painter = painterResource(id = R.drawable.ic_arrow_back),
+                    contentDescription = "Back",
+                    modifier = Modifier
+                        .size(24.dp)
+                        .clickable { navController.popBackStack() }
+                )
+                Text(
+                    text = "Thông tin cá nhân",
+                    fontSize = 24.sp,
+                    fontWeight = FontWeight.Bold
+                )
+                Icon(
+                    painter = painterResource(id = R.drawable.bell),
+                    contentDescription = "Notifications",
+                    modifier = Modifier
+                        .size(24.dp)
+                        .clickable { onNotificationClick() }
+                )
+            }
+
+            Spacer(modifier = Modifier.height(50.dp))
+
+//            // Avatar
+//            AsyncImage(
+//                model = avatarModel,
+//                fallback = painterResource(id = R.drawable.ao_phong),
+//                contentDescription = "Avatar",
+//                contentScale = ContentScale.Crop,
+//                modifier = Modifier
+//                    .size(140.dp)
+//                    .clip(CircleShape)
+//                    .clickable {
+//                        // Check for permission before picking an image
+//                        when {
+//                            // If permission is already granted, open the image picker
+//                            ContextCompat.checkSelfPermission(context, Manifest.permission.READ_MEDIA_IMAGES) == PackageManager.PERMISSION_GRANTED -> {
+//                                getImageLauncher.launch("image/*")
+//                            }
+//                            // If the app is running on Android 13+, request permission
+//                            Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU -> {
+//                                permissionLauncher.launch(Manifest.permission.READ_MEDIA_IMAGES)
+//                            }
+//                            // If running on Android 12 or lower, request the old permission
+//                            else -> {
+//                                permissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE)
+//                            }
+//                        }
+//                    }
+//            )
+
+            Spacer(modifier = Modifier.height(15.dp))
+
+            Text(
+                "Thay đổi hình ảnh hồ sơ",
+                fontSize = 10.sp,
+                fontWeight = FontWeight.Bold,
+                color = Color(0xFF777777),
+                style = TextStyle(textDecoration = TextDecoration.Underline),
+            )
+
+            Spacer(modifier = Modifier.height(20.dp))
 
-        // Full Name
-        Text(
-            text = "Họ tên",
-            fontSize = 16.sp,
-            color = Color.Black,
-            modifier = Modifier.padding(bottom = 8.dp)
-        )
-        OutlinedTextField(
-            value = fullName.value,
-            onValueChange = { fullName.value = it },
-            placeholder = { Text("Nhập họ tên của bạn") },
-            modifier = Modifier.fillMaxWidth(),
-            shape = RoundedCornerShape(12.dp),
-            colors = OutlinedTextFieldDefaults.colors(
-                unfocusedBorderColor = Color.LightGray,
-                focusedBorderColor = Color.Black
-            )
-        )
+            // Full Name
+            Text(
+                text = "Họ tên",
+                fontSize = 16.sp,
+                color = Color.Black,
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(bottom = 8.dp)
+            )
+            OutlinedTextField(
+                value = fullName,
+                onValueChange = { fullName = it },
+                placeholder = { Text("Nhập họ tên của bạn") },
+                modifier = Modifier.fillMaxWidth(),
+                shape = RoundedCornerShape(12.dp),
+                colors = OutlinedTextFieldDefaults.colors(
+                    unfocusedBorderColor = Color.LightGray,
+                    focusedBorderColor = Color.Black
+                )
+            )
 
-        Spacer(modifier = Modifier.height(16.dp))
+            Spacer(modifier = Modifier.height(16.dp))
 
-        // Email Address
-        Text(
-            text = "Email",
-            fontSize = 16.sp,
-            color = Color.Black,
-            modifier = Modifier.padding(bottom = 8.dp)
-        )
-        OutlinedTextField(
-            value = email.value,
-            onValueChange = { email.value = it },
-            placeholder = { Text("Nhập email của bạn") },
-            modifier = Modifier.fillMaxWidth(),
-            shape = RoundedCornerShape(12.dp),
-            colors = OutlinedTextFieldDefaults.colors(
-                unfocusedBorderColor = Color.LightGray,
-                focusedBorderColor = Color.Black
-            ),
-            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email)
-        )
+            // Email Address
+            Text(
+                text = "Email",
+                fontSize = 16.sp,
+                color = Color.Black,
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(bottom = 8.dp)
+            )
+            OutlinedTextField(
+                value = email,
+                onValueChange = { email = it },
+                placeholder = { Text("Nhập email của bạn") },
+                modifier = Modifier.fillMaxWidth(),
+                shape = RoundedCornerShape(12.dp),
+                colors = OutlinedTextFieldDefaults.colors(
+                    unfocusedBorderColor = Color.LightGray,
+                    focusedBorderColor = Color.Black
+                ),
+                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email)
+            )
 
-        Spacer(modifier = Modifier.height(16.dp))
+            Spacer(modifier = Modifier.height(16.dp))
 
-        // Date of Birth
-        Text(
-            text = "Ngày sinh",
-            fontSize = 16.sp,
-            color = Color.Black,
-            modifier = Modifier.padding(bottom = 8.dp)
-        )
-        OutlinedTextField(
-            value = dateOfBirth.value,
-            onValueChange = { dateOfBirth.value = it },
-            placeholder = { Text("Nhập ngày sinh của bạn") },
-            modifier = Modifier.fillMaxWidth(),
-            shape = RoundedCornerShape(12.dp),
-            colors = OutlinedTextFieldDefaults.colors(
-                unfocusedBorderColor = Color.LightGray,
-                focusedBorderColor = Color.Black
-            ),
-            trailingIcon = {
-                Icon(
-                    painter = painterResource(id = R.drawable.calendar),
-                    contentDescription = "Select date",
-                    modifier = Modifier.size(24.dp)
-                )
-            }
-        )
+            // Date of Birth
+            Text(
+                text = "Ngày sinh",
+                fontSize = 16.sp,
+                color = Color.Black,
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(bottom = 8.dp)
+            )
+            OutlinedTextField(
+                value = dateOfBirth,
+                onValueChange = { dateOfBirth = it },
+                placeholder = { Text("Nhập ngày sinh của bạn") },
+                modifier = Modifier.fillMaxWidth(),
+                shape = RoundedCornerShape(12.dp),
+                colors = OutlinedTextFieldDefaults.colors(
+                    unfocusedBorderColor = Color.LightGray,
+                    focusedBorderColor = Color.Black
+                ),
+                trailingIcon = {
+                    Icon(
+                        painter = painterResource(id = R.drawable.calendar),
+                        contentDescription = "Select date",
+                        modifier = Modifier.size(24.dp)
+                    )
+                }
+            )
 
-        Spacer(modifier = Modifier.height(16.dp))
+            Spacer(modifier = Modifier.height(16.dp))
 
-        // Gender
-        Text(
-            text = "Giới tính",
-            fontSize = 16.sp,
-            color = Color.Black,
-            modifier = Modifier.padding(bottom = 8.dp)
-        )
-        OutlinedTextField(
-            value = gender.value,
-            onValueChange = { gender.value = it },
-            placeholder = { Text("Nhập giới tính của bạn") },
-            modifier = Modifier.fillMaxWidth(),
-            shape = RoundedCornerShape(12.dp),
-            colors = OutlinedTextFieldDefaults.colors(
-                unfocusedBorderColor = Color.LightGray,
-                focusedBorderColor = Color.Black
-            )
-        )
+            // Gender
+            Text(
+                text = "Giới tính",
+                fontSize = 16.sp,
+                color = Color.Black,
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(bottom = 8.dp)
+            )
+            OutlinedTextField(
+                value = gender,
+                onValueChange = { gender = it },
+                placeholder = { Text("Nhập giới tính của bạn") },
+                modifier = Modifier.fillMaxWidth(),
+                shape = RoundedCornerShape(12.dp),
+                colors = OutlinedTextFieldDefaults.colors(
+                    unfocusedBorderColor = Color.LightGray,
+                    focusedBorderColor = Color.Black
+                )
+            )
 
-        Spacer(modifier = Modifier.height(16.dp))
+            Spacer(modifier = Modifier.height(16.dp))
 
-        // Phone Number
-        Text(
-            text = "Số điện thoại",
-            fontSize = 16.sp,
-            color = Color.Black,
-            modifier = Modifier.padding(bottom = 8.dp)
-        )
-        OutlinedTextField(
-            value = phoneNumber.value,
-            onValueChange = { phoneNumber.value = it },
-            placeholder = { Text("Nhập SDT của bạn") },
-            modifier = Modifier.fillMaxWidth(),
-            shape = RoundedCornerShape(12.dp),
-            colors = OutlinedTextFieldDefaults.colors(
-                unfocusedBorderColor = Color.LightGray,
-                focusedBorderColor = Color.Black
-            ),
-            leadingIcon = {
-                Row(
-                    horizontalArrangement = Arrangement.spacedBy(4.dp),
-                    modifier = Modifier.padding(start = 16.dp)
-                ) {
-                    Image(
-                        painter = painterResource(id = R.drawable.vietnam),
-                        contentDescription = "US flag",
-                        modifier = Modifier.size(24.dp)
-                    )
-                }
-            },
-            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone)
-        )
+            // Phone Number
+            Text(
+                text = "Số điện thoại",
+                fontSize = 16.sp,
+                color = Color.Black,
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(bottom = 8.dp)
+            )
+            OutlinedTextField(
+                value = phone,
+                onValueChange = { phone = it },
+                placeholder = { Text("Nhập SDT của bạn") },
+                modifier = Modifier.fillMaxWidth(),
+                shape = RoundedCornerShape(12.dp),
+                colors = OutlinedTextFieldDefaults.colors(
+                    unfocusedBorderColor = Color.LightGray,
+                    focusedBorderColor = Color.Black
+                ),
+                leadingIcon = {
+                    Row(
+                        horizontalArrangement = Arrangement.spacedBy(4.dp),
+                        modifier = Modifier.padding(start = 16.dp)
+                    ) {
+                        Image(
+                            painter = painterResource(id = R.drawable.vietnam),
+                            contentDescription = "Vietnam flag",
+                            modifier = Modifier.size(24.dp)
+                        )
+                    }
+                },
+                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone)
+            )
+        }
 
-        Spacer(modifier = Modifier.weight(1f))
-
+        // Nút lưu thay đổi luôn ở dưới cùng
         Button(
-            onClick = { },
-            modifier = Modifier
-                .fillMaxWidth()
-                .padding(top = 24.dp)
-                .height(50.dp),
+            onClick = {
+                if (fullName.isEmpty() || email.isEmpty() || dateOfBirth.isEmpty() || gender.isEmpty() || phone.isEmpty()) {
+                    Toast.makeText(context, "Vui lòng nhập đầy đủ thông tin.", Toast.LENGTH_SHORT)
+                        .show()
+                    return@Button
+                }
+
+                // Tạo request để cập nhật thông tin
+                val updatedUser = UpdateUserRequest(
+                    fullName = fullName,
+                    email = email,
+                    gender = if (gender.isBlank()) null else gender,
+                    phone = if (phone.isBlank()) null else phone,
+                    dateOfBirth = if (dateOfBirth.isBlank()) null else dateOfBirth,
+//                    file = avatarUri?.let { createMultipartBody(it, context) }
+                    file = null
+                )
+
+                myDetailsViewModel.updateProfile(
+                    updatedUser = updatedUser,
+                    onSuccess = { updatedUserModel ->
+                        Toast.makeText(context, "Cập nhật thành công!", Toast.LENGTH_SHORT).show()
+                        onSubmit()
+                        navController.popBackStack()
+                    },
+                    onError = { errorMessage ->
+                        Toast.makeText(context, "Lỗi: $errorMessage", Toast.LENGTH_LONG).show()
+                        Log.e("MyDetailsScreen", "Lỗi cập nhật: $errorMessage")
+                    }
+                )
+            },
             colors = ButtonDefaults.buttonColors(
                 containerColor = if (isFormValid) Color.Black else Color.LightGray
             ),
-            shape = RoundedCornerShape(12.dp)
+            shape = RoundedCornerShape(12.dp),
+            modifier = Modifier
+                .fillMaxWidth()
+                .align(Alignment.BottomCenter)
+                .padding(16.dp)
+                .height(50.dp)
         ) {
             Text(
                 text = "Lưu",
@@ -220,6 +377,7 @@
     }
 }
 
+
 @Preview(showSystemUi = true, showBackground = true)
 @Composable
 fun MyDetailsScreenPreview() {
Index: app/src/main/java/fpl/md19/beefashion/viewModels/LoginViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fpl.md19.beefashion.viewModels\r\n\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.google.gson.Gson\r\nimport fpl.md19.beefashion.api.HttpRequest\r\nimport fpl.md19.beefashion.models.UserModel\r\nimport fpl.md19.beefashion.requests.LoginRequest\r\nimport fpl.md19.beefashion.GlobalVarible.UserSesion\r\nimport fpl.md19.beefashion.requests.RegisterRequest\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.launch\r\nimport retrofit2.Response\r\n\r\nclass LoginViewModel : ViewModel() {\r\n    private val _loginMessage = MutableStateFlow<String?>(null)\r\n    val loginMessage: StateFlow<String?> = _loginMessage\r\n\r\n    private val _registerMessage = MutableStateFlow<String?>(null)\r\n    val registerMessage: StateFlow<String?> = _registerMessage\r\n\r\n    private val _loginResponse = MutableStateFlow<Response<UserModel>?>(null)\r\n    val loginResponse: StateFlow<Response<UserModel>?> = _loginResponse\r\n\r\n    private val _registerResponse = MutableStateFlow<Response<UserModel>?>(null)\r\n    val registerResponse: StateFlow<Response<UserModel>?> = _registerResponse\r\n\r\n    var rememberedEmail: String = \"\"\r\n        private set\r\n    var rememberedPassword: String = \"\"\r\n        private set\r\n    var isRemembered: Boolean = false\r\n        private set\r\n\r\n    private val PREF_NAME = \"login_preferences\"\r\n    private val PREF_EMAIL = \"email\"\r\n    private val PREF_PASSWORD = \"password\"\r\n    private val PREF_REMEMBER = \"remember_me\"\r\n\r\n    fun login(context: Context, email: String, password: String, rememberMe: Boolean) {\r\n        viewModelScope.launch {\r\n            try {\r\n                _loginResponse.value = null\r\n                _loginMessage.value = null\r\n\r\n                val response = HttpRequest.getInstance().Login(LoginRequest(email, password))\r\n                if (response.isSuccessful) {\r\n                    _loginResponse.value = response\r\n                    _loginMessage.value = \"Đăng nhập thành công!\"\r\n                    UserSesion.currentUser = response.body()\r\n\r\n                    if (rememberMe) {\r\n                        saveCredentials(\r\n                            context, email, password, userModel = UserSesion.currentUser!!\r\n                        )\r\n                    } else {\r\n                        clearCredentials(context)\r\n                    }\r\n                } else {\r\n                    if (response.code() == 404) {\r\n                        _loginMessage.value = \"Tài khoản hoặc mật khẩu không chính xác.\"\r\n                    } else {\r\n                        _loginMessage.value = \"Đã xảy ra lỗi: ${response.message()}\"\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                _loginMessage.value = \"Không thể kết nối đến server: ${e.message}\"\r\n            }\r\n        }\r\n    }\r\n\r\n    fun register(email: String, password: String, fullName: String) {\r\n        viewModelScope.launch {\r\n            try {\r\n                _registerResponse.value = null\r\n                _registerMessage.value = null\r\n                val response =\r\n                    HttpRequest.getInstance().Register(RegisterRequest(fullName, email, password))\r\n                if (response.isSuccessful) {\r\n                    _registerMessage.value = \"Đăng ký thành công!\"\r\n                    UserSesion.currentUser = UserModel(\r\n                        email = email,\r\n                        fullName = fullName,\r\n                        password = password\r\n                    )\r\n                } else {\r\n                    if (response.code() == 409) {\r\n                        _registerMessage.value = \"Email này đã tồn tại!\"\r\n                    } else {\r\n                        _registerMessage.value = \"Đã xảy ra lỗi: ${response.message()}\"\r\n                    }\r\n                }\r\n            } catch (e: Exception) {\r\n                _registerMessage.value = \"Không thể kết nối đến server: ${e.message}\"\r\n            }\r\n        }\r\n    }\r\n\r\n    fun loadRememberedCredentials(context: Context) {\r\n        val sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)\r\n\r\n        val userJson = sharedPreferences.getString(\"user\", null)\r\n        if (userJson != null) {\r\n            val gson = Gson()\r\n            val userModel = gson.fromJson(userJson, UserModel::class.java)\r\n\r\n            rememberedEmail = sharedPreferences.getString(PREF_EMAIL, \"\") ?: \"\"\r\n            rememberedPassword = sharedPreferences.getString(PREF_PASSWORD, \"\") ?: \"\"\r\n            isRemembered = sharedPreferences.getBoolean(PREF_REMEMBER, false)\r\n        } else {\r\n            rememberedPassword = \"\"\r\n            isRemembered = false\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private fun saveCredentials(\r\n        context: Context, email: String, password: String, userModel: UserModel\r\n    ) {\r\n        val sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)\r\n\r\n        val editor = sharedPreferences.edit()\r\n\r\n        val gson = Gson()\r\n        val userJson = gson.toJson(userModel)\r\n\r\n        editor.putString(\"user\", userJson)\r\n        editor.putString(PREF_EMAIL, email)\r\n        editor.putString(PREF_PASSWORD, password)\r\n        editor.putBoolean(PREF_REMEMBER, true)\r\n        editor.apply()\r\n\r\n    }\r\n\r\n    private fun clearCredentials(context: Context) {\r\n        val sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)\r\n        sharedPreferences.edit().remove(\"user\").remove(PREF_EMAIL).remove(PREF_PASSWORD)\r\n            .putBoolean(PREF_REMEMBER, false).apply()\r\n    }\r\n\r\n    fun logout(context: Context) {\r\n        clearCredentials(context)\r\n\r\n\r\n        _loginMessage.value = \"Đăng xuất thành công!\"\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/fpl/md19/beefashion/viewModels/LoginViewModel.kt b/app/src/main/java/fpl/md19/beefashion/viewModels/LoginViewModel.kt
--- a/app/src/main/java/fpl/md19/beefashion/viewModels/LoginViewModel.kt	(revision 92dbacdc6821ff1c428a26b578598dc2b3023b3c)
+++ b/app/src/main/java/fpl/md19/beefashion/viewModels/LoginViewModel.kt	(date 1740730034594)
@@ -85,7 +85,11 @@
                     UserSesion.currentUser = UserModel(
                         email = email,
                         fullName = fullName,
-                        password = password
+                        phone = null,
+                        gender = null,
+                        dateOfBirth = null,
+//                        profileImageUrl = ""
+
                     )
                 } else {
                     if (response.code() == 409) {
Index: app/src/main/java/fpl/md19/beefashion/api/ApiService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fpl.md19.beefashion.api\r\n\r\nimport fpl.md19.beefashion.models.UserModel\r\nimport fpl.md19.beefashion.requests.LoginRequest\r\nimport fpl.md19.beefashion.requests.RegisterRequest\r\nimport retrofit2.Response\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.POST\r\n\r\ninterface ApiService {\r\n    @POST(\"/auth/login\")\r\n    suspend fun Login(@Body request: LoginRequest): Response<UserModel>\r\n\r\n    @POST(\"/auth/register\")\r\n    suspend fun Register(@Body request: RegisterRequest): Response<UserModel>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/fpl/md19/beefashion/api/ApiService.kt b/app/src/main/java/fpl/md19/beefashion/api/ApiService.kt
--- a/app/src/main/java/fpl/md19/beefashion/api/ApiService.kt	(revision 92dbacdc6821ff1c428a26b578598dc2b3023b3c)
+++ b/app/src/main/java/fpl/md19/beefashion/api/ApiService.kt	(date 1740746938688)
@@ -1,11 +1,17 @@
 package fpl.md19.beefashion.api
 
+import androidx.core.app.GrammaticalInflectionManagerCompat.GrammaticalGender
 import fpl.md19.beefashion.models.UserModel
 import fpl.md19.beefashion.requests.LoginRequest
 import fpl.md19.beefashion.requests.RegisterRequest
+import okhttp3.MultipartBody
+import okhttp3.RequestBody
 import retrofit2.Response
 import retrofit2.http.Body
+import retrofit2.http.Multipart
 import retrofit2.http.POST
+import retrofit2.http.PUT
+import retrofit2.http.Part
 
 interface ApiService {
     @POST("/auth/login")
@@ -13,4 +19,15 @@
 
     @POST("/auth/register")
     suspend fun Register(@Body request: RegisterRequest): Response<UserModel>
+
+    @Multipart
+    @PUT(" /customers")
+    suspend fun EditProfile(
+        @Part("email") email: RequestBody,
+        @Part("fullName") fullName: RequestBody,
+        @Part("phone") phone: RequestBody?,
+        @Part("gender") gender: RequestBody?,
+        @Part("dateOfBirth") dateOfBirth: RequestBody?,
+        @Part file: MultipartBody.Part?
+    ): Response<UserModel>
 }
\ No newline at end of file
Index: app/src/main/java/fpl/md19/beefashion/models/UserModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fpl.md19.beefashion.models\r\n\r\ndata class UserModel (\r\n    val fullName: String,\r\n    val email: String,\r\n    val password: String,\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/fpl/md19/beefashion/models/UserModel.kt b/app/src/main/java/fpl/md19/beefashion/models/UserModel.kt
--- a/app/src/main/java/fpl/md19/beefashion/models/UserModel.kt	(revision 92dbacdc6821ff1c428a26b578598dc2b3023b3c)
+++ b/app/src/main/java/fpl/md19/beefashion/models/UserModel.kt	(date 1740729863718)
@@ -3,5 +3,8 @@
 data class UserModel (
     val fullName: String,
     val email: String,
-    val password: String,
+    val dateOfBirth: String?,
+    val gender: String?,
+    val phone: String?,
+//    val profileImageUrl: String?
 )
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.compose)\r\n    alias(libs.plugins.google.gms.google.services)\r\n}\r\n\r\nandroid {\r\n    namespace = \"fpl.md19.beefashion\"\r\n    compileSdk = 35\r\n\r\n    defaultConfig {\r\n        applicationId = \"fpl.md19.beefashion\"\r\n        minSdk = 24\r\n        targetSdk = 35\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n    implementation(libs.firebase.auth)\r\n    implementation(libs.androidx.runtime.livedata)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n\r\n    implementation(\"androidx.hilt:hilt-navigation-compose:1.2.0\")\r\n    implementation(\"androidx.navigation:navigation-compose:2.8.5\")\r\n\r\n    // Retrofit for API calls\r\n    implementation(\"com.squareup.retrofit2:retrofit:2.9.0\")\r\n    implementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 92dbacdc6821ff1c428a26b578598dc2b3023b3c)
+++ b/app/build.gradle.kts	(date 1740720683573)
@@ -68,6 +68,13 @@
     implementation("com.squareup.retrofit2:retrofit:2.9.0")
     implementation("com.squareup.retrofit2:converter-gson:2.9.0")
 
+    implementation ("com.squareup.okhttp3:okhttp:4.9.3")
+    implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")
+    implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")
+
+    implementation("io.coil-kt:coil-compose:2.7.0")
+
+
 
 
 
